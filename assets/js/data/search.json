[
  {
    "title": "QNQSEC Debtor's Database Writeup",
    "url": "/post/qnqsec-debtors-database/",
    "categories": "writeup, pwn",
    "tags": "stack-canary, stack-overflow",
    "date": "2025-10-20 00:00:00 +0200",
    "content": "About The binary    The binary is dynamically linked, and has all security mitigations turned on. Reversing main  int main() { 	void* fsbase 	int64_t canary = *(fsbase + 0x28) 	setup() 	puts(&quot;What ..."
  },
  {
    "title": "Sigreturn Oriented Programming",
    "url": "/post/srop/",
    "categories": "notes, rop",
    "tags": "srop",
    "date": "2025-10-13 00:00:00 +0200",
    "content": "Sigreturn Oriented Programming.  SROP (Sigreturn Oriented Programming) is binary exploitation technique that leverages the signal handling mechanisms in POSIX systems to gain control over CPU regis..."
  },
  {
    "title": "Uninitialized Data Access",
    "url": "/post/UDA/",
    "categories": "notes, uda",
    "tags": "uda",
    "date": "2025-10-10 00:00:00 +0200",
    "content": "Overview  So what are Uninitialized variables? Uninitialized variables are variables that are declared byt they are not assigned a value  e.g.  #include &amp;lt;stdio.h&amp;gt;  // complile : gcc vuln.c -o..."
  },
  {
    "title": "Fastbin Exploitation",
    "url": "/post/Fastbin-dup/",
    "categories": "notes, heap-exploitation",
    "tags": "fastbin-dup, fastbin, heap-exploitation",
    "date": "2025-10-05 00:00:00 +0200",
    "content": "Explanation of the `fastbin dup` heap exploitation technique"
  },
  {
    "title": "Information Disclosure",
    "url": "/post/information-leaks/",
    "categories": "notes, info-leaks",
    "tags": "info-leak",
    "date": "2025-09-27 00:00:00 +0200",
    "content": "Information/Memory Leaks In Binary Exploitation  What is a memory leak? A information/memory leak is any primitive in a binary that reveals bytes from the programâ€™s memory such as addresses, pointe..."
  },
  {
    "title": "Who Needs POP `RDI?` You Have `gets()`",
    "url": "/post/ret2gets/",
    "categories": "notes, rop",
    "tags": "ret2gets",
    "date": "2025-09-26 00:00:00 +0200",
    "content": "Facing a gadget-poor binary? This post reveals how gets() can be your ultimate ROP primitive. By understanding how gets() reuses the existing RDI value from the vulnerable buffer, we can craft prec..."
  },
  {
    "title": "Tcache Poisioning",
    "url": "/post/tcache-poisioning/",
    "categories": "notes, heap-exploitation",
    "tags": "tcache, tcach-poisioning",
    "date": "2025-09-25 00:00:00 +0200",
    "content": "Understanding Tcache  Thread Local Caching (Tcache) is a set of bins, organised as singly-linked lists, that are local to each thread. Tcache was made to avoid the need to lock a global arena for f..."
  },
  {
    "title": "Unlink Exploit",
    "url": "/post/unlink-exploit/",
    "categories": "notes, heap-exploitation",
    "tags": "unlink-exploit",
    "date": "2025-09-07 00:00:00 +0200",
    "content": "Understanding how unlinking happens in libc (old and modern)  and how to exploit it"
  },
  {
    "title": "Global Variable Overwrite",
    "url": "/post/Global_varibale_overwrite/",
    "categories": "writeup, pwn",
    "tags": "stack",
    "date": "2025-07-28 00:00:00 +0200",
    "content": "Exploit Write-up: Buffer Overflow with Global Variable Control  Challenge  Overview  In this challenge, we are given a C program that contains a buffer overflow vulnerability in the func() function..."
  },
  {
    "title": " Pwn & Reverse Engineering Lab with Docker",
    "url": "/post/Pwn-Environment-Lab/",
    "categories": "pwn",
    "tags": "pwn-env",
    "date": "2025-07-23 00:00:00 +0200",
    "content": "Building a Reproducible Pwn &amp;amp; Reverse Engineering Lab with Docker  Spinning up a reliable workspace for reverse engineering and binary exploitation on modern machines can be tricky. Old challen..."
  },
  {
    "title": "UMDCTF",
    "url": "/post/Gambling/",
    "categories": "writeup, pwn",
    "tags": "gambling",
    "date": "2025-04-28 00:00:00 +0200",
    "content": "UMDCTF Gambling pwn challenge    About binary  pwn checksec gambling [*] &#39;/home/hacker/REPO/binexp/comp/umdctf/gambling/gambling&#39;     Arch:     i386-32-little     RELRO:    Partial RELRO     Stack:..."
  },
  {
    "title": "Protostar Stack Writeups",
    "url": "/post/Protostar-Stack/",
    "categories": "writeup, pwn",
    "tags": "protostar-stack",
    "date": "2025-04-23 00:00:00 +0200",
    "content": "Protostar Stack Writeups  Stack 0  GOAL : Modify a variable  0x08048405 &amp;lt;+17&amp;gt;:	lea    eax,[esp+0x1c] 0x08048409 &amp;lt;+21&amp;gt;:	mov    DWORD PTR [esp],eax 0x0804840c &amp;lt;+24&amp;gt;:	call   0x804830..."
  }
  
]

